package se306group8.scheduleoptimizer.algorithm.childfinder;

import java.util.List;

import se306group8.scheduleoptimizer.algorithm.TreeSchedule;

/**
 * Interface for producing child TreeSchedules 
 */
@FunctionalInterface
public interface ChildScheduleFinderOld {
	
	/** Returns a collection of child schedules that can be generated by adding one task to this solution.
	 * This list may not be exhaustive, but any omissions must have equivalent schedules returned by some PartialSolution.
	 * 
	 *  Equivalent means that the solution tree generated by the other task is a super tree of the tree generated by the omitted task.
	 *  A super tree is a tree where every task in the original tree has an equivalent task in the super tree. */
	List<TreeSchedule> getChildSchedules(TreeSchedule schedule);
}
